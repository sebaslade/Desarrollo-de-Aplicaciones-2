//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServicioAuto
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicioAuto.WS_AutoSoap")]
    public interface WS_AutoSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CalcularMulta", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        float CalcularMulta(string strNumPlaca);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CalcularMulta", ReplyAction="*")]
        System.Threading.Tasks.Task<float> CalcularMultaAsync(string strNumPlaca);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AutoPropietario", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AutoPropietario(string strNumPlaca);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AutoPropietario", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AutoPropietarioAsync(string strNumPlaca);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PapeletasImpagas", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ServicioAuto.ArrayOfXElement PapeletasImpagas(string strNumPlaca);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PapeletasImpagas", ReplyAction="*")]
        System.Threading.Tasks.Task<ServicioAuto.ArrayOfXElement> PapeletasImpagasAsync(string strNumPlaca);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface WS_AutoSoapChannel : ServicioAuto.WS_AutoSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class WS_AutoSoapClient : System.ServiceModel.ClientBase<ServicioAuto.WS_AutoSoap>, ServicioAuto.WS_AutoSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public WS_AutoSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(WS_AutoSoapClient.GetBindingForEndpoint(endpointConfiguration), WS_AutoSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WS_AutoSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(WS_AutoSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WS_AutoSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(WS_AutoSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WS_AutoSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public float CalcularMulta(string strNumPlaca)
        {
            return base.Channel.CalcularMulta(strNumPlaca);
        }
        
        public System.Threading.Tasks.Task<float> CalcularMultaAsync(string strNumPlaca)
        {
            return base.Channel.CalcularMultaAsync(strNumPlaca);
        }
        
        public string AutoPropietario(string strNumPlaca)
        {
            return base.Channel.AutoPropietario(strNumPlaca);
        }
        
        public System.Threading.Tasks.Task<string> AutoPropietarioAsync(string strNumPlaca)
        {
            return base.Channel.AutoPropietarioAsync(strNumPlaca);
        }
        
        public ServicioAuto.ArrayOfXElement PapeletasImpagas(string strNumPlaca)
        {
            return base.Channel.PapeletasImpagas(strNumPlaca);
        }
        
        public System.Threading.Tasks.Task<ServicioAuto.ArrayOfXElement> PapeletasImpagasAsync(string strNumPlaca)
        {
            return base.Channel.PapeletasImpagasAsync(strNumPlaca);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WS_AutoSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.WS_AutoSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WS_AutoSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://localhost:44342/WS_Auto.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.WS_AutoSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://localhost:44342/WS_Auto.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            WS_AutoSoap,
            
            WS_AutoSoap12,
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil-lib", "2.2.0.0")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable
    {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement()
        {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes
        {
            get
            {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema()
        {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer)
        {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            )
            {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader)
        {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            )
            {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element))
                {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else
                {
                    reader.Skip();
                }
            }
        }
    }
}
