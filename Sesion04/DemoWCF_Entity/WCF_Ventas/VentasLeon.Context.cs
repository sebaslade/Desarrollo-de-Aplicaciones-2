//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCF_Ventas
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class VentasLeonEntities : DbContext
    {
        public VentasLeonEntities()
            : base("name=VentasLeonEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Tb_Abastecimiento> Tb_Abastecimiento { get; set; }
        public virtual DbSet<Tb_Categoria> Tb_Categoria { get; set; }
        public virtual DbSet<Tb_Cliente> Tb_Cliente { get; set; }
        public virtual DbSet<Tb_Detalle_Compra> Tb_Detalle_Compra { get; set; }
        public virtual DbSet<Tb_Detalle_Factura> Tb_Detalle_Factura { get; set; }
        public virtual DbSet<Tb_Factura> Tb_Factura { get; set; }
        public virtual DbSet<Tb_Orden_Compra> Tb_Orden_Compra { get; set; }
        public virtual DbSet<Tb_Producto> Tb_Producto { get; set; }
        public virtual DbSet<Tb_Proveedor> Tb_Proveedor { get; set; }
        public virtual DbSet<Tb_Ubigeo> Tb_Ubigeo { get; set; }
        public virtual DbSet<Tb_UnidadMedida> Tb_UnidadMedida { get; set; }
        public virtual DbSet<Tb_Usuario> Tb_Usuario { get; set; }
        public virtual DbSet<Tb_Vendedor> Tb_Vendedor { get; set; }
    
        public virtual ObjectResult<usp_ConsultarVendedor_Result> usp_ConsultarVendedor(string vcod)
        {
            var vcodParameter = vcod != null ?
                new ObjectParameter("vcod", vcod) :
                new ObjectParameter("vcod", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ConsultarVendedor_Result>("usp_ConsultarVendedor", vcodParameter);
        }
    
        public virtual ObjectResult<usp_ListarFacturasVendedorFechas_Result> usp_ListarFacturasVendedorFechas(string codven, Nullable<System.DateTime> fecini, Nullable<System.DateTime> fecfin)
        {
            var codvenParameter = codven != null ?
                new ObjectParameter("codven", codven) :
                new ObjectParameter("codven", typeof(string));
    
            var feciniParameter = fecini.HasValue ?
                new ObjectParameter("fecini", fecini) :
                new ObjectParameter("fecini", typeof(System.DateTime));
    
            var fecfinParameter = fecfin.HasValue ?
                new ObjectParameter("fecfin", fecfin) :
                new ObjectParameter("fecfin", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ListarFacturasVendedorFechas_Result>("usp_ListarFacturasVendedorFechas", codvenParameter, feciniParameter, fecfinParameter);
        }
    
        public virtual int usp_ActualizarVendedor(string vcod, string vnom, string vape, Nullable<decimal> vsue, Nullable<System.DateTime> vfec, Nullable<int> vtip, string vDNI, string vEmail, string vcodSup, string vUsu_ult_mod, Nullable<int> vest_ven)
        {
            var vcodParameter = vcod != null ?
                new ObjectParameter("vcod", vcod) :
                new ObjectParameter("vcod", typeof(string));
    
            var vnomParameter = vnom != null ?
                new ObjectParameter("vnom", vnom) :
                new ObjectParameter("vnom", typeof(string));
    
            var vapeParameter = vape != null ?
                new ObjectParameter("vape", vape) :
                new ObjectParameter("vape", typeof(string));
    
            var vsueParameter = vsue.HasValue ?
                new ObjectParameter("vsue", vsue) :
                new ObjectParameter("vsue", typeof(decimal));
    
            var vfecParameter = vfec.HasValue ?
                new ObjectParameter("vfec", vfec) :
                new ObjectParameter("vfec", typeof(System.DateTime));
    
            var vtipParameter = vtip.HasValue ?
                new ObjectParameter("vtip", vtip) :
                new ObjectParameter("vtip", typeof(int));
    
            var vDNIParameter = vDNI != null ?
                new ObjectParameter("vDNI", vDNI) :
                new ObjectParameter("vDNI", typeof(string));
    
            var vEmailParameter = vEmail != null ?
                new ObjectParameter("vEmail", vEmail) :
                new ObjectParameter("vEmail", typeof(string));
    
            var vcodSupParameter = vcodSup != null ?
                new ObjectParameter("vcodSup", vcodSup) :
                new ObjectParameter("vcodSup", typeof(string));
    
            var vUsu_ult_modParameter = vUsu_ult_mod != null ?
                new ObjectParameter("vUsu_ult_mod", vUsu_ult_mod) :
                new ObjectParameter("vUsu_ult_mod", typeof(string));
    
            var vest_venParameter = vest_ven.HasValue ?
                new ObjectParameter("vest_ven", vest_ven) :
                new ObjectParameter("vest_ven", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ActualizarVendedor", vcodParameter, vnomParameter, vapeParameter, vsueParameter, vfecParameter, vtipParameter, vDNIParameter, vEmailParameter, vcodSupParameter, vUsu_ult_modParameter, vest_venParameter);
        }
    
        public virtual int usp_EliminarVendedor(string vcod)
        {
            var vcodParameter = vcod != null ?
                new ObjectParameter("vcod", vcod) :
                new ObjectParameter("vcod", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EliminarVendedor", vcodParameter);
        }
    
        public virtual int usp_InsertarVendedor(string vnom, string vape, Nullable<decimal> vsue, Nullable<System.DateTime> vfec, Nullable<int> vtip, string vDNI_ven, string vEmail_ven, string vCod_Supervisor, string vUsu_registro, Nullable<int> vEst_ven)
        {
            var vnomParameter = vnom != null ?
                new ObjectParameter("vnom", vnom) :
                new ObjectParameter("vnom", typeof(string));
    
            var vapeParameter = vape != null ?
                new ObjectParameter("vape", vape) :
                new ObjectParameter("vape", typeof(string));
    
            var vsueParameter = vsue.HasValue ?
                new ObjectParameter("vsue", vsue) :
                new ObjectParameter("vsue", typeof(decimal));
    
            var vfecParameter = vfec.HasValue ?
                new ObjectParameter("vfec", vfec) :
                new ObjectParameter("vfec", typeof(System.DateTime));
    
            var vtipParameter = vtip.HasValue ?
                new ObjectParameter("vtip", vtip) :
                new ObjectParameter("vtip", typeof(int));
    
            var vDNI_venParameter = vDNI_ven != null ?
                new ObjectParameter("vDNI_ven", vDNI_ven) :
                new ObjectParameter("vDNI_ven", typeof(string));
    
            var vEmail_venParameter = vEmail_ven != null ?
                new ObjectParameter("vEmail_ven", vEmail_ven) :
                new ObjectParameter("vEmail_ven", typeof(string));
    
            var vCod_SupervisorParameter = vCod_Supervisor != null ?
                new ObjectParameter("vCod_Supervisor", vCod_Supervisor) :
                new ObjectParameter("vCod_Supervisor", typeof(string));
    
            var vUsu_registroParameter = vUsu_registro != null ?
                new ObjectParameter("vUsu_registro", vUsu_registro) :
                new ObjectParameter("vUsu_registro", typeof(string));
    
            var vEst_venParameter = vEst_ven.HasValue ?
                new ObjectParameter("vEst_ven", vEst_ven) :
                new ObjectParameter("vEst_ven", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertarVendedor", vnomParameter, vapeParameter, vsueParameter, vfecParameter, vtipParameter, vDNI_venParameter, vEmail_venParameter, vCod_SupervisorParameter, vUsu_registroParameter, vEst_venParameter);
        }
    }
}
